package a1_SeleniumIDE;


// Generated by Selenium IDE
import org.junit.Test;


import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

public class AddMirrorToCartTest {
	private WebDriver driver;
	private Map<String, Object> vars;
	JavascriptExecutor js;
	@Before
	public void setUp() {
	
		System.setProperty("webdriver.chrome.driver",
				"C:\\Users\\TBHAUSAH\\Downloads\\chromedriver_win32\\chromedriver.exe");
		driver = new ChromeDriver();
		driver.get("http://www.myntra.com");
		js = (JavascriptExecutor) driver;
		vars = new HashMap<String, Object>();
	}
	@After
	public void tearDown() {
		driver.quit();
	}
	public String waitForWindow(int timeout) {
		try {
			Thread.sleep(timeout);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		Set<String> whNow = driver.getWindowHandles();
		Set<String> whThen = (Set<String>) vars.get("window_handles");
		if (whNow.size() > whThen.size()) {
			whNow.removeAll(whThen);
		}
		return whNow.iterator().next();
	}
	@Test
	public void addMirrorToCart() {
		driver.get("https://www.myntra.com/");
		driver.manage().window().setSize(new Dimension(650, 680));
		{
			WebElement element = driver.findElement(By.linkText("Bed Runners"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		{
			WebElement element = driver.findElement(By.tagName("body"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element, 0, 0).perform();
		}
		driver.findElement(By.linkText("Mirrors")).click();
		{
			WebElement element = driver.findElement(By.cssSelector(".product-base:nth-child(2) .img-responsive > .img-responsive"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		{
			WebElement element = driver.findElement(By.tagName("body"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element, 0, 0).perform();
		}
		{
			WebElement element = driver.findElement(By.cssSelector(".product-base:nth-child(1) .img-responsive > .img-responsive"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		{
			WebElement element = driver.findElement(By.tagName("body"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element, 0, 0).perform();
		}
		{
			WebElement element = driver.findElement(By.cssSelector(".product-base:nth-child(4) .img-responsive > .img-responsive"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		{
			WebElement element = driver.findElement(By.tagName("body"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element, 0, 0).perform();
		}
		js.executeScript("window.scrollTo(0,329.3333435058594)");
		js.executeScript("window.scrollTo(0,726.6666870117188)");
		{
			WebElement element = driver.findElement(By.cssSelector(".product-base:nth-child(4) .img-responsive > .img-responsive"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		{
			WebElement element = driver.findElement(By.cssSelector(".product-base:nth-child(7) .img-responsive > .img-responsive"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		{
			WebElement element = driver.findElement(By.tagName("body"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element, 0, 0).perform();
		}
		{
			WebElement element = driver.findElement(By.cssSelector(".product-base:nth-child(8) .img-responsive > .img-responsive"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element).perform();
		}
		{
			WebElement element = driver.findElement(By.tagName("body"));
			Actions builder = new Actions(driver);
			builder.moveToElement(element, 0, 0).perform();
		}
		js.executeScript("window.scrollTo(0,650)");
		vars.put("window_handles", driver.getWindowHandles());
		driver.findElement(By.cssSelector(".slick-active .img-responsive > .img-responsive")).click();
		vars.put("win2567", waitForWindow(2000));
		driver.switchTo().window(vars.get("win2567").toString());
		driver.findElement(By.cssSelector(".pdp-add-to-bag")).click();
		driver.findElement(By.cssSelector(".desktop-userTitle:nth-child(3)")).click();
		js.executeScript("window.scrollTo(0,287.3333435058594)");
		driver.findElement(By.cssSelector(".itemComponents-base-invisibleBackDrop")).click();
		driver.findElement(By.cssSelector(".bulkActionStrip-desktopBulkWishlist")).click();
		driver.findElement(By.cssSelector(".bulkActionStrip-waterMelon")).click();
	}
}

